{
  "stats": {
    "suites": 5,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2017-04-27T07:14:50.905Z",
    "end": "2017-04-27T07:14:50.936Z",
    "duration": 31,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "zip operator on arrays",
        "suites": [],
        "tests": [
          {
            "title": "zip([1,2],[3,4]) should be [[1,3],[2,4]]",
            "fullTitle": "zip operator on arrays zip([1,2],[3,4]) should be [[1,3],[2,4]]",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zip([1, 2], [3, 4])).to.deep.equal([[1, 3], [2, 4]]);",
            "err": {},
            "isRoot": false,
            "uuid": "10ed0095-45dc-4ce1-95f1-1056a56035ae",
            "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
            "skipped": false
          },
          {
            "title": "zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
            "fullTitle": "zip operator on arrays zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zip([1, 2], [3, 4], [5, 6])).to.deep.equal([[1, 3, 5], [2, 4, 6]]);",
            "err": {},
            "isRoot": false,
            "uuid": "d5be22f3-40d8-4860-be45-e8972e9fbb4d",
            "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/basic.test.js",
        "uuid": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
        "fullFile": "/home/tjdr/Workspace/calendar/test/basic.test.js",
        "passes": [
          {
            "title": "zip([1,2],[3,4]) should be [[1,3],[2,4]]",
            "fullTitle": "zip operator on arrays zip([1,2],[3,4]) should be [[1,3],[2,4]]",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zip([1, 2], [3, 4])).to.deep.equal([[1, 3], [2, 4]]);",
            "err": {},
            "isRoot": false,
            "uuid": "10ed0095-45dc-4ce1-95f1-1056a56035ae",
            "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
            "skipped": false
          },
          {
            "title": "zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
            "fullTitle": "zip operator on arrays zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zip([1, 2], [3, 4], [5, 6])).to.deep.equal([[1, 3, 5], [2, 4, 6]]);",
            "err": {},
            "isRoot": false,
            "uuid": "d5be22f3-40d8-4860-be45-e8972e9fbb4d",
            "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3,
        "rootEmpty": false
      },
      {
        "title": "zipWith operator on arrays",
        "suites": [],
        "tests": [
          {
            "title": "zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
            "fullTitle": "zipWith operator on arrays zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zipWith(function (x, y) {\n  return x + y;\n}, [1, 2], [3, 4])).to.deep.equal([4, 6]);",
            "err": {},
            "isRoot": false,
            "uuid": "cf547701-04d2-4158-8387-56fafdb84185",
            "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
            "skipped": false
          },
          {
            "title": "zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
            "fullTitle": "zipWith operator on arrays zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zipWith(function (x, y, z) {\n  return x * y + z;\n}, [1, 2], [3, 4], [5, 6])).to.deep.equal([8, 14]);",
            "err": {},
            "isRoot": false,
            "uuid": "a6ed4815-5a86-4231-a119-a751be2f4270",
            "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/basic.test.js",
        "uuid": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
        "fullFile": "/home/tjdr/Workspace/calendar/test/basic.test.js",
        "passes": [
          {
            "title": "zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
            "fullTitle": "zipWith operator on arrays zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zipWith(function (x, y) {\n  return x + y;\n}, [1, 2], [3, 4])).to.deep.equal([4, 6]);",
            "err": {},
            "isRoot": false,
            "uuid": "cf547701-04d2-4158-8387-56fafdb84185",
            "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
            "skipped": false
          },
          {
            "title": "zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
            "fullTitle": "zipWith operator on arrays zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.zipWith(function (x, y, z) {\n  return x * y + z;\n}, [1, 2], [3, 4], [5, 6])).to.deep.equal([8, 14]);",
            "err": {},
            "isRoot": false,
            "uuid": "a6ed4815-5a86-4231-a119-a751be2f4270",
            "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "omap operator for object",
        "suites": [],
        "tests": [
          {
            "title": "omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
            "fullTitle": "omap operator for object omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.omap({ a: 3, b: 4 }, function (x) {\n  return x * 2;\n})).to.deep.equal({ a: 6, b: 8 });",
            "err": {},
            "isRoot": false,
            "uuid": "f45ba7fa-c8e5-446d-a958-153fb842893d",
            "parentUUID": "416fef58-524a-4ec2-9986-8ff5203e5f4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/basic.test.js",
        "uuid": "416fef58-524a-4ec2-9986-8ff5203e5f4d",
        "fullFile": "/home/tjdr/Workspace/calendar/test/basic.test.js",
        "passes": [
          {
            "title": "omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
            "fullTitle": "omap operator for object omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.omap({ a: 3, b: 4 }, function (x) {\n  return x * 2;\n})).to.deep.equal({ a: 6, b: 8 });",
            "err": {},
            "isRoot": false,
            "uuid": "f45ba7fa-c8e5-446d-a958-153fb842893d",
            "parentUUID": "416fef58-524a-4ec2-9986-8ff5203e5f4d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1,
        "rootEmpty": false
      },
      {
        "title": "ozip operator for object",
        "suites": [],
        "tests": [
          {
            "title": "ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
            "fullTitle": "ozip operator for object ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.ozip({ a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: [4, 6, 1], b: [7, 1, 7] });",
            "err": {},
            "isRoot": false,
            "uuid": "5398d743-a102-472b-967c-36fa269c6491",
            "parentUUID": "666de581-c60e-4c78-aa9e-e1be5b032328",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/basic.test.js",
        "uuid": "666de581-c60e-4c78-aa9e-e1be5b032328",
        "fullFile": "/home/tjdr/Workspace/calendar/test/basic.test.js",
        "passes": [
          {
            "title": "ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
            "fullTitle": "ozip operator for object ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.ozip({ a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: [4, 6, 1], b: [7, 1, 7] });",
            "err": {},
            "isRoot": false,
            "uuid": "5398d743-a102-472b-967c-36fa269c6491",
            "parentUUID": "666de581-c60e-4c78-aa9e-e1be5b032328",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "ozipWith operator for object",
        "suites": [],
        "tests": [
          {
            "title": "ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
            "fullTitle": "ozipWith operator for object ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.ozipWith(function (x, y, z) {\n  return x * y + z;\n}, { a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: 25, b: 14 });",
            "err": {},
            "isRoot": false,
            "uuid": "f055ca53-daa0-43eb-b0d8-02c5ecf0efa4",
            "parentUUID": "b2a1aaf1-2349-49f3-9073-bef342f32a27",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/basic.test.js",
        "uuid": "b2a1aaf1-2349-49f3-9073-bef342f32a27",
        "fullFile": "/home/tjdr/Workspace/calendar/test/basic.test.js",
        "passes": [
          {
            "title": "ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
            "fullTitle": "ozipWith operator for object ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(std.ozipWith(function (x, y, z) {\n  return x * y + z;\n}, { a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: 25, b: 14 });",
            "err": {},
            "isRoot": false,
            "uuid": "f055ca53-daa0-43eb-b0d8-02c5ecf0efa4",
            "parentUUID": "b2a1aaf1-2349-49f3-9073-bef342f32a27",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "2b4bc009-90a4-4011-8aff-022a4178856e",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "zip([1,2],[3,4]) should be [[1,3],[2,4]]",
      "fullTitle": "zip operator on arrays zip([1,2],[3,4]) should be [[1,3],[2,4]]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zip([1, 2], [3, 4])).to.deep.equal([[1, 3], [2, 4]]);",
      "err": {},
      "isRoot": false,
      "uuid": "10ed0095-45dc-4ce1-95f1-1056a56035ae",
      "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
      "skipped": false
    },
    {
      "title": "zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
      "fullTitle": "zip operator on arrays zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zip([1, 2], [3, 4], [5, 6])).to.deep.equal([[1, 3, 5], [2, 4, 6]]);",
      "err": {},
      "isRoot": false,
      "uuid": "d5be22f3-40d8-4860-be45-e8972e9fbb4d",
      "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
      "skipped": false
    },
    {
      "title": "zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
      "fullTitle": "zipWith operator on arrays zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zipWith(function (x, y) {\n  return x + y;\n}, [1, 2], [3, 4])).to.deep.equal([4, 6]);",
      "err": {},
      "isRoot": false,
      "uuid": "cf547701-04d2-4158-8387-56fafdb84185",
      "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
      "skipped": false
    },
    {
      "title": "zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
      "fullTitle": "zipWith operator on arrays zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zipWith(function (x, y, z) {\n  return x * y + z;\n}, [1, 2], [3, 4], [5, 6])).to.deep.equal([8, 14]);",
      "err": {},
      "isRoot": false,
      "uuid": "a6ed4815-5a86-4231-a119-a751be2f4270",
      "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
      "skipped": false
    },
    {
      "title": "omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
      "fullTitle": "omap operator for object omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.omap({ a: 3, b: 4 }, function (x) {\n  return x * 2;\n})).to.deep.equal({ a: 6, b: 8 });",
      "err": {},
      "isRoot": false,
      "uuid": "f45ba7fa-c8e5-446d-a958-153fb842893d",
      "parentUUID": "416fef58-524a-4ec2-9986-8ff5203e5f4d",
      "skipped": false
    },
    {
      "title": "ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
      "fullTitle": "ozip operator for object ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.ozip({ a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: [4, 6, 1], b: [7, 1, 7] });",
      "err": {},
      "isRoot": false,
      "uuid": "5398d743-a102-472b-967c-36fa269c6491",
      "parentUUID": "666de581-c60e-4c78-aa9e-e1be5b032328",
      "skipped": false
    },
    {
      "title": "ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
      "fullTitle": "ozipWith operator for object ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.ozipWith(function (x, y, z) {\n  return x * y + z;\n}, { a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: 25, b: 14 });",
      "err": {},
      "isRoot": false,
      "uuid": "f055ca53-daa0-43eb-b0d8-02c5ecf0efa4",
      "parentUUID": "b2a1aaf1-2349-49f3-9073-bef342f32a27",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "zip([1,2],[3,4]) should be [[1,3],[2,4]]",
      "fullTitle": "zip operator on arrays zip([1,2],[3,4]) should be [[1,3],[2,4]]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zip([1, 2], [3, 4])).to.deep.equal([[1, 3], [2, 4]]);",
      "err": {},
      "isRoot": false,
      "uuid": "10ed0095-45dc-4ce1-95f1-1056a56035ae",
      "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
      "skipped": false
    },
    {
      "title": "zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
      "fullTitle": "zip operator on arrays zip([1,2],[3,4],[5,6]) should be [[1,3,5],[2,4,6]]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zip([1, 2], [3, 4], [5, 6])).to.deep.equal([[1, 3, 5], [2, 4, 6]]);",
      "err": {},
      "isRoot": false,
      "uuid": "d5be22f3-40d8-4860-be45-e8972e9fbb4d",
      "parentUUID": "07a3b09d-7ba3-42b8-b8af-f73471deb906",
      "skipped": false
    },
    {
      "title": "zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
      "fullTitle": "zipWith operator on arrays zipWith((x,y)=>x+y, [1,2],[3,4]) should be [4,6]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zipWith(function (x, y) {\n  return x + y;\n}, [1, 2], [3, 4])).to.deep.equal([4, 6]);",
      "err": {},
      "isRoot": false,
      "uuid": "cf547701-04d2-4158-8387-56fafdb84185",
      "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
      "skipped": false
    },
    {
      "title": "zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
      "fullTitle": "zipWith operator on arrays zipWith((x,y,z)=>x*y+z, [1,2],[3,4],[5,6]) should be [8,14]",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.zipWith(function (x, y, z) {\n  return x * y + z;\n}, [1, 2], [3, 4], [5, 6])).to.deep.equal([8, 14]);",
      "err": {},
      "isRoot": false,
      "uuid": "a6ed4815-5a86-4231-a119-a751be2f4270",
      "parentUUID": "9ca0308d-19b2-4c35-a6f0-61c17d3879e5",
      "skipped": false
    },
    {
      "title": "omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
      "fullTitle": "omap operator for object omap({a:3, b:4},x=>x*2) should be {a:6, b:8}",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.omap({ a: 3, b: 4 }, function (x) {\n  return x * 2;\n})).to.deep.equal({ a: 6, b: 8 });",
      "err": {},
      "isRoot": false,
      "uuid": "f45ba7fa-c8e5-446d-a958-153fb842893d",
      "parentUUID": "416fef58-524a-4ec2-9986-8ff5203e5f4d",
      "skipped": false
    },
    {
      "title": "ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
      "fullTitle": "ozip operator for object ozip({a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:[4,6,1], b:[7,1,7]}",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.ozip({ a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: [4, 6, 1], b: [7, 1, 7] });",
      "err": {},
      "isRoot": false,
      "uuid": "5398d743-a102-472b-967c-36fa269c6491",
      "parentUUID": "666de581-c60e-4c78-aa9e-e1be5b032328",
      "skipped": false
    },
    {
      "title": "ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
      "fullTitle": "ozipWith operator for object ozipWith((x, y, z) => x * y + z, {a:4,b:7},{a:6,b:1},{a:1,b:7}) should be {a:25, b:14}",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(std.ozipWith(function (x, y, z) {\n  return x * y + z;\n}, { a: 4, b: 7 }, { a: 6, b: 1 }, { a: 1, b: 7 })).to.deep.equal({ a: 25, b: 14 });",
      "err": {},
      "isRoot": false,
      "uuid": "f055ca53-daa0-43eb-b0d8-02c5ecf0efa4",
      "parentUUID": "b2a1aaf1-2349-49f3-9073-bef342f32a27",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}